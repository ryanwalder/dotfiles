# Alias definitions.
# enable/start ssh agent
agent_started=0
if ! env | grep -q SSH_AGENT_PID >/dev/null; then
  echo "Starting ssh agent"
  eval $(ssh-agent -s)
  agent_started=1
fi

# make ssh a function, add the identity to agent when needed
ssh() {
  if ! ssh-add -l >/dev/null 2>&-; then
    ssh-add ~/.ssh/id_rsa
  fi
  /usr/bin/ssh "$@"
}
export -f ssh

git() {
  if ! ssh-add -l >/dev/null 2>&-; then
    ssh-add ~/.ssh/id_rsa
  fi
  /usr/bin/git "$@"
}
export -f git

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
fi

# eg, extract examples from manpages
eg(){
    MAN_KEEP_FORMATTING=1 man "$@" 2>/dev/null \
        | sed --quiet --expression='/^E\(\x08.\)X\(\x08.\)\?A\(\x08.\)\?M\(\x08.\)\?P\(\x08.\)\?L\(\x08.\)\?E/{:a;p;n;/^[^ ]/q;ba}'
}

# some more ls aliases
alias ll='ls -l'
alias la='ls -al'
alias mtr='mtr --curses'

# Navigation...
alias ..='cd ../'
alias ...='cd ../../'
alias ....='cd ../../../'

# GCP
alias gcls='gcloud compute instances list'
alias gsls='gsutil ls'

# Vagrant
function vd() {
    if [[ -z $@ ]]; then
        vagrant destroy -f
    else
        vagrant destroy -f "$@"
    fi
}

function vud() {
    vagrant destroy -f "$1" ; vagrant up "$1" && vagrant ssh "$1"
}

function vls() {
    if [[ -f vagrant.yaml ]]; then
        domain=$(grep domain vagrant.yaml | cut -d: -f 2 | tr -d ' ')
        boxes=$(grep "name:" vagrant.yaml | cut -d: -f2)
        for i in $boxes; do
          echo ${i}.${domain:-tfu.io}
        done
    else
        vagrant status | grep -E '(lxc|virtualbox|docker)'
    fi
}

function vuh() {
    boxes=$@
    # Destroy the specified machines first
    vagrant destroy -f ${boxes}
    # Launch the saltmaster if it's not running
    if ! vagrant status saltmaster | grep saltmaster | grep -q "running"; then
        vagrant up saltmaster
    fi
    # Launch each machine in the background then wait for them to come up
    for i in ${boxes}; do
        vagrant up "$i" &
    done
    wait
    # Sleep for a minute to let the mine populate
    sleep 60
    # Run a highstate on each box in order.
    # This could be parallelized but it would make the salt output very hard
    # to follow
    for i in ${boxes}; do
        vagrant ssh "$i" -c "sudo salt-call state.apply"
    done
}

alias vssh="vagrant ssh"
alias vup="vagrant up"

# Docker
dnfo() {
    sudo docker stop $(sudo docker ps -a -q)
    sudo docker rm $(sudo docker ps -a -q)
    sudo docker rmi $(sudo docker images -q)
}

# lazy
alias docs='mkdocs serve'
alias colours='for code in {0..255}; do echo -e "\e[38;05;${code}m $code: Test"; done'

# Convert
y2j() {
  local in="$1"
  local out=${in%.*}
  python -c 'import sys, yaml, json; json.dump(yaml.load(sys.stdin), sys.stdout, indent=4)' < "${in}" > "${out}.json"
}

j2y() {
  local in="$1"
  local out=${in%.*}
  python -c 'import sys, yaml, json; yaml.safe_dump(json.load(sys.stdin), sys.stdout, default_flow_style=False)' < "${in}" > "${out}.yaml"
}

# Ansible
alias ansible-vault='ansible-vault --vault-password-file=$ANSIBLE_VAULT_PASSWORD_FILE'
